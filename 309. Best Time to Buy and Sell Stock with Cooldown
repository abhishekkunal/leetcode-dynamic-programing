class Solution {
public:
      int helper(vector<int> &prices,int i,int bag,vector<vector<int>>&dp)
      {
          if(i>=prices.size()) return 0;
          if(dp[i][bag]!=-1) return dp[i][bag];
          if(bag==1)
          {
               int op1= prices[i]+helper(prices,i+2,0,dp);
              int op2=helper(prices,i+1,1,dp);
               dp[i][bag]=max(op1,op2);
          }
      
          else
          {
              int op3=-prices[i]+helper(prices,i+1,1,dp);
              int op2=helper(prices,i+1,0,dp);
               dp[i][bag]=max(op2,op3);
          }
              return dp[i][bag];
      }
    int maxProfit(vector<int>& prices) {
          vector<vector<int>> dp(prices.size()+1,vector<int>(2,-1));
       return  helper(prices,0,0,dp);
    }
};
